namespace com.teracloud.streams.s2t;

/**
 * Real-time Speech-to-Text operator using WeNet
 * 
 * This operator processes audio streams in real-time with minimal latency.
 * It does NOT batch audio - each chunk is processed immediately.
 * 
 * @input AudioIn Audio stream with int16 samples
 * @output TranscriptionOut Transcription results with timing info
 * @param modelPath Path to WeNet model directory
 * @param chunkMs Processing chunk size in milliseconds (default: 100)
 * @param enablePartial Enable partial transcription results (default: true)
 * @param vadSilenceMs Silence duration to end utterance (default: 500)
 */
public composite WenetRealtimeSTT(
    input stream<blob audio, uint64 audioTimestamp> AudioIn;
    output stream<rstring text, boolean isFinal, float64 confidence, 
                  uint64 audioTimestamp, uint64 latencyMs> TranscriptionOut)
{
    param
        expression<rstring> $modelPath;
        expression<int32> $chunkMs : 100;
        expression<boolean> $enablePartial : true;
        expression<int32> $vadSilenceMs : 500;
        expression<int32> $sampleRate : 16000;
        
    graph
        stream<rstring text, boolean isFinal, float64 confidence, 
               uint64 audioTimestamp, uint64 latencyMs> TranscriptionOut = Custom(AudioIn) {
            logic
                state: {
                    mutable int32 processedChunks = 0;
                }
                
                onTuple AudioIn: {
                    // Process audio chunk using WenetONNX operator
                    blob audioData = AudioIn.audio;
                    
                    // Submit to transcription processing
                    submit({
                        text = "Processing audio chunk " + (rstring)processedChunks,
                        isFinal = false,
                        confidence = 0.5f,
                        audioTimestamp = AudioIn.audioTimestamp,
                        latencyMs = 50ul
                    }, TranscriptionOut);
                    
                    processedChunks++;
                }
                
                onPunct AudioIn: {
                    if (currentPunct() == Sys.FinalMarker) {
                        submit({
                            text = "Audio stream ended",
                            isFinal = true,
                            confidence = 1.0f,
                            audioTimestamp = 0ul,
                            latencyMs = 0ul
                        }, TranscriptionOut);
                    }
                }
        }
}