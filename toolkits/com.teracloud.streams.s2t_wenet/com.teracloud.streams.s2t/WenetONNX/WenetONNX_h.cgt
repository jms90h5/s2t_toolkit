/*
 * WenetONNX operator header
 */

#ifndef WENET_ONNX_OPERATOR_H
#define WENET_ONNX_OPERATOR_H

#include <SPL/Runtime/Operator/Operator.h>
#include <SPL/Runtime/Operator/ParameterValue.h>
#include <SPL/Runtime/Operator/OperatorContext.h>
#include <SPL/Runtime/Operator/Port/AutoPortMutex.h>
#include <SPL/Runtime/Operator/State/StateHandler.h>
#include <SPL/Runtime/ProcessingElement/PE.h>
#include "../../impl/include/WenetONNXImpl.hpp"
#include <memory>

<%SPL::CodeGen::headerPrologue($model);%>

namespace wenet_onnx_operator {

class MY_OPERATOR : public MY_BASE_OPERATOR {
public:
    MY_OPERATOR();
    virtual ~MY_OPERATOR();
    
    // Process incoming tuples
    void process(Tuple const & tuple, uint32_t port);
    void process(Punctuation const & punct, uint32_t port);
    
private:
    // Configuration
    wenet_streams::WenetONNXImpl::Config config_;
    
    // ONNX-based implementation
    std::unique_ptr<wenet_streams::WenetONNXImpl> wenet_impl_;
    
    // State tracking
    bool initialized_;
    uint64_t audio_timestamp_ms_;
    uint64_t total_samples_processed_;
    
    // Helper methods
    void initialize();
    void processAudioData(const SPL::blob& audio_blob);
    void submitResult(const wenet_streams::WenetONNXImpl::TranscriptionResult& result);
};

} // namespace wenet_onnx_operator

<%SPL::CodeGen::headerEpilogue($model);%>

#endif // WENET_ONNX_OPERATOR_H