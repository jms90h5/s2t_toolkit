<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<operatorInstanceModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator/instance" xmlns:an="http://www.ibm.com/xmlns/prod/streams/spl/annotation" xmlns:tt="http://www.ibm.com/xmlns/prod/streams/spl/tupleType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <context>
    <kind>spl.utility::Custom</kind>
    <class>AudioStream</class>
    <operatorModelDirectory>/homes/jsharpe/teracloud/streams/7.2.0.0/toolkits/spl/spl/utility/Custom</operatorModelDirectory>
    <applicationDirectory>/homes/jsharpe/teracloud/toolkits/com.teracloud.streams.s2t/samples/BasicWorkingExample</applicationDirectory>
    <dataDirectory/>
    <outputDirectory>/homes/jsharpe/teracloud/toolkits/com.teracloud.streams.s2t/samples/BasicWorkingExample/output</outputDirectory>
    <toolkits>
      <toolkit isCurrentToolkit="false">
        <name>BasicWorkingExample</name>
        <rootDirectory>/homes/jsharpe/teracloud/toolkits/com.teracloud.streams.s2t/samples/BasicWorkingExample</rootDirectory>
        <index>0</index>
      </toolkit>
      <toolkit isCurrentToolkit="true">
        <name>spl</name>
        <rootDirectory>/homes/jsharpe/teracloud/streams/7.2.0.0/toolkits/spl</rootDirectory>
        <index>1</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.teracloud.streams.s2t</name>
        <rootDirectory>/homes/jsharpe/teracloud/toolkits/com.teracloud.streams.s2t</rootDirectory>
        <index>2</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>streamsx.health</name>
        <rootDirectory>/homes/jsharpe/teracloud/toolkits/streamsx.health</rootDirectory>
        <index>3</index>
      </toolkit>
    </toolkits>
    <optimized>true</optimized>
    <verbose>false</verbose>
    <networkByteOrdering>false</networkByteOrdering>
    <codeBeautification>false</codeBeautification>
    <includes>
      <include>"../type/BWS8pWC_1HYKrTViSTcG4T5GFz_0nGxqvmNlrajI9k_1E5zHNl9YbvsoTe9P3EfS_0f6OzRd8ZZzCJBaSXCG5A8XGA6.h"</include>
    </includes>
    <stateVariables>
      <stateVariable>
        <name>state$count</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>
          <cppType>SPL::int32</cppType>
          <splType>int32</splType>
          <hasRuntimeConstant>true</hasRuntimeConstant>
          <cppExpression>lit$0</cppExpression>
          <splExpression>0</splExpression>
          <hasFunctions>false</hasFunctions>
          <hasSideEffects>false</hasSideEffects>
          <readsState>false</readsState>
          <hasStreamAttributes>false</hasStreamAttributes>
          <sourceLocation>
            <file>BasicDemo.spl</file>
            <line>24</line>
            <column>43</column>
          </sourceLocation>
        </value>
        <sourceLocation>
          <file>BasicDemo.spl</file>
          <line>24</line>
          <column>35</column>
        </sourceLocation>
      </stateVariable>
    </stateVariables>
    <runtimeConstants>
      <runtimeConstant>
        <name>lit$0</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$1</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>10</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$2</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"mock_audio_data_sample_"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$3</name>
        <cppType>SPL::float64</cppType>
        <splType>float64</splType>
        <value>1000</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$4</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$5</name>
        <cppType>SPL::float64</cppType>
        <splType>float64</splType>
        <value>1</value>
      </runtimeConstant>
    </runtimeConstants>
    <sourceLocation>
      <file>BasicDemo.spl</file>
      <line>21</line>
      <column>9</column>
    </sourceLocation>
    <productVersion>7.2.0.0</productVersion>
    <processLogic>{
    while ((state$count &lt; lit$1))
        {
            SPL::blob id$audioBlob = ::SPL::Functions::String::convertToBlob((lit$2 + ::SPL::spl_cast&lt;SPL::rstring, SPL::int32 &gt;::cast(state$count)));
            do { SPL::BWS8pWC_1HYKrTViSTcG4T5GFz_0nGxqvmNlrajI9k_1E5zHNl9YbvsoTe9P3EfS_0f6OzRd8ZZzCJBaSXCG5A8XGA6 temp = SPL::BWS8pWC_1HYKrTViSTcG4T5GFz_0nGxqvmNlrajI9k_1E5zHNl9YbvsoTe9P3EfS_0f6OzRd8ZZzCJBaSXCG5A8XGA6(id$audioBlob, ::SPL::spl_cast&lt;SPL::uint64, SPL::float64 &gt;::cast((::SPL::Functions::Time::getTimestampInSecs() * lit$3))); submit (temp, lit$4); } while(0);
            state$count++;
            ::SPL::Functions::Utility::block(lit$5);
        }
}
</processLogic>
    <checkpointKind>none</checkpointKind>
  </context>
  <parameters/>
  <inputPorts/>
  <outputPorts>
    <outputPort>
      <index>0</index>
      <tupleCppName>oport$0</tupleCppName>
      <tupleCppType>SPL::BWS8pWC_1HYKrTViSTcG4T5GFz_0nGxqvmNlrajI9k_1E5zHNl9YbvsoTe9P3EfS_0f6OzRd8ZZzCJBaSXCG5A8XGA6</tupleCppType>
      <tupleSPLType>tuple&lt;blob audio,uint64 audioTimestamp&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>BasicDemo.spl</file>
        <line>21</line>
        <column>9</column>
      </sourceLocation>
      <attributes>
        <attribute>
          <name>audio</name>
          <cppType>SPL::blob</cppType>
          <splType>blob</splType>
        </attribute>
        <attribute>
          <name>audioTimestamp</name>
          <cppType>SPL::uint64</cppType>
          <splType>uint64</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="audio" type="blob"/>
        <tt:attr name="audioTimestamp" type="uint64"/>
      </tuple>
      <finalPunctuationPortScope/>
      <exceptionPort>false</exceptionPort>
    </outputPort>
  </outputPorts>
  <exceptionPorts/>
</operatorInstanceModel>
