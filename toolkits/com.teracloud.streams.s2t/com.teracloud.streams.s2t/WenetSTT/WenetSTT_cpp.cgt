/*
 * WenetSTT operator implementation
 */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
    my $modelPath = $model->getParameterByName("modelPath")->getValueAt(0)->getCppExpression();
    
    my $sampleRate = $model->getParameterByName("sampleRate");
    $sampleRate = $sampleRate ? $sampleRate->getValueAt(0)->getCppExpression() : "16000";
    
    my $chunkSize = $model->getParameterByName("chunkSize");
    $chunkSize = $chunkSize ? $chunkSize->getValueAt(0)->getCppExpression() : "16";
    
    my $nbest = $model->getParameterByName("nbest");
    $nbest = $nbest ? $nbest->getValueAt(0)->getCppExpression() : "1";
    
    my $numThreads = $model->getParameterByName("numThreads");
    $numThreads = $numThreads ? $numThreads->getValueAt(0)->getCppExpression() : "1";
%>

// Implementation code starts here
#include <SPL/Runtime/Common/ApplicationRuntimeMessage.h>
#include <SPL/Runtime/Utility/LogTraceMessage.h>
#include <iostream>
#include <vector>

using namespace SPL;
using namespace std;

// Using the SPL-generated namespace and class names

MY_OPERATOR::MY_OPERATOR() 
    : initialized_(false)
    , audio_timestamp_ms_(0)
    , total_samples_processed_(0) {
    
    SPLAPPTRC(L_DEBUG, "WenetSTT operator constructor", "WenetSTT");
}

MY_OPERATOR::~MY_OPERATOR() {
    SPLAPPTRC(L_DEBUG, "WenetSTT operator destructor", "WenetSTT");
}

void MY_OPERATOR::initialize() {
    if (initialized_) return;
    
    try {
        // Configure WeNet implementation
        config_.model_dir = <%=$modelPath%>;
        config_.sample_rate = <%=$sampleRate%>;
        config_.chunk_size = <%=$chunkSize%>;
        config_.nbest = <%=$nbest%>;
        config_.num_threads = <%=$numThreads%>;
        config_.enable_timestamp = false;
        
        SPLAPPTRC(L_INFO, "Initializing WenetSTT with model: " + config_.model_dir, "WenetSTT");
        
        // Create implementation
        wenet_impl_ = std::make_unique<wenet_streams::WenetSTTWrapper>(config_);
        
        // Initialize
        if (!wenet_impl_->initialize()) {
            SPLAPPTRC(L_ERROR, "Failed to initialize WenetSTT", "WenetSTT");
            throw std::runtime_error("WenetSTT initialization failed");
        }
        
        initialized_ = true;
        SPLAPPTRC(L_INFO, "WenetSTT initialized successfully", "WenetSTT");
        
    } catch (const std::exception& e) {
        SPLAPPTRC(L_ERROR, "Exception during initialization: " + string(e.what()), "WenetSTT");
        throw;
    }
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
    // Initialize on first tuple
    if (!initialized_) {
        initialize();
    }
    
    AutoPortMutex apm(_mutex, *this);
    
    const IPort0Type& iport = static_cast<const IPort0Type&>(tuple);
    
    // Get audio data
    // Note: This assumes the input has an attribute that is a blob
    // In this sample it's named 'audioChunk'
    processAudioData(iport.get_audioChunk());
    
    // Get timestamp
    audio_timestamp_ms_ = iport.get_audioTimestamp();
}

void MY_OPERATOR::processAudioData(const SPL::blob& audio_blob) {
    // Get audio samples
    const int16_t* samples = reinterpret_cast<const int16_t*>(audio_blob.getData());
    size_t num_samples = audio_blob.getSize() / sizeof(int16_t);
    
    if (num_samples == 0) return;
    
    // Process with WeNet implementation
    auto result = wenet_impl_->processAudioChunk(samples, num_samples, audio_timestamp_ms_);
    
    // Update stats
    total_samples_processed_ += num_samples;
    audio_timestamp_ms_ += (num_samples * 1000) / config_.sample_rate;
    
    // Submit result if we have text
    if (!result.text.empty()) {
        submitResult(result);
    }
    
    // Log performance periodically
    if (total_samples_processed_ % (config_.sample_rate * 10) == 0) {
        auto stats = wenet_impl_->getStats();
        SPLAPPTRC(L_INFO, 
            "Processed " + to_string(total_samples_processed_ / config_.sample_rate) + 
            " seconds, RTF: " + to_string(stats.real_time_factor), 
            "WenetSTT");
    }
}

void MY_OPERATOR::submitResult(const wenet_streams::WenetSTTWrapper::TranscriptionResult& result) {
    // Create output tuple
    OPort0Type otuple;
    
    // Set attributes
    otuple.set_text(result.text);
    otuple.set_isFinal(result.is_final);
    otuple.set_confidence(result.confidence);
    
    // Submit the tuple
    submit(otuple, 0);
    
    SPLAPPTRC(L_DEBUG, 
        "Submitted: " + result.text + 
        " (final=" + to_string(result.is_final) + 
        ", latency=" + to_string(result.latency_ms) + "ms)", 
        "WenetSTT");
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
    if (punct == Punctuation::FinalMarker) {
        // Reset the decoder on final punctuation
        if (wenet_impl_) {
            wenet_impl_->reset();
            SPLAPPTRC(L_DEBUG, "Reset decoder on final punctuation", "WenetSTT");
        }
    }
    
    // Forward punctuation
    submit(punct, 0);
}

// End of implementation

<%SPL::CodeGen::implementationEpilogue($model);%>